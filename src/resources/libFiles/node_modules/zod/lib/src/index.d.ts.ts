export default {
    fileName: `/node_modules/zod/lib/src/index.d.ts`,
    // File text is copyright Microsoft Corporation and is distributed under the Apache License, Version 2.0 (http://www.apache.org/licenses/LICENSE-2.0)
    text: `import{ZodString,ZodStringDef}from'./types/string';import{ZodNumber,ZodNumberDef}from'./types/number';import{ZodBigInt,ZodBigIntDef}from'./types/bigint';import{ZodBoolean,ZodBooleanDef}from'./types/boolean';import{ZodDate,ZodDateDef}from'./types/date';import{ZodUndefined,ZodUndefinedDef}from'./types/undefined';import{ZodNull,ZodNullDef}from'./types/null';import{ZodAny,ZodAnyDef}from'./types/any';import{ZodUnknown,ZodUnknownDef}from'./types/unknown';import{ZodVoid,ZodVoidDef}from'./types/void';import{ZodArray,ZodArrayDef}from'./types/array';import{ZodObject,ZodObjectDef}from'./types/object';import{ZodUnion,ZodUnionDef}from'./types/union';import{ZodIntersection,ZodIntersectionDef}from'./types/intersection';import{ZodTuple,ZodTupleDef}from'./types/tuple';import{ZodRecord,ZodRecordDef}from'./types/record';import{ZodFunction,ZodFunctionDef}from'./types/function';import{ZodLazy,ZodLazyDef}from'./types/lazy';import{ZodLiteral,ZodLiteralDef}from'./types/literal';import{ZodEnum,ZodEnumDef}from'./types/enum';import{ZodPromise,ZodPromiseDef}from'./types/promise';import{TypeOf,ZodType,ZodTypeAny,ZodTypeDef,ZodTypes}from'./types/base';import{ZodError,ZodErrorCode}from'./ZodError';import{ZodParsedType}from'./parser';import{ZodErrorMap}from'./defaultErrorMap';import{ZodCodeGenerator}from'./codegen';export{ZodTypeDef,ZodTypes};declare type ZodDef=ZodStringDef|ZodNumberDef|ZodBigIntDef|ZodBooleanDef|ZodDateDef|ZodUndefinedDef|ZodNullDef|ZodAnyDef|ZodUnknownDef|ZodVoidDef|ZodArrayDef|ZodObjectDef|ZodUnionDef|ZodIntersectionDef|ZodTupleDef|ZodRecordDef|ZodFunctionDef|ZodLazyDef|ZodLiteralDef|ZodEnumDef|ZodPromiseDef;declare const stringType:()=>ZodString;declare const numberType:()=>ZodNumber;declare const bigIntType:()=>ZodBigInt;declare const booleanType:()=>ZodBoolean;declare const dateType:()=>ZodDate;declare const undefinedType:()=>ZodUndefined;declare const nullType:()=>ZodNull;declare const anyType:()=>ZodAny;declare const unknownType:()=>ZodUnknown;declare const voidType:()=>ZodVoid;declare const arrayType:<T extends ZodType<any,any>>(schema:T)=>ZodArray<T>;declare const objectType:<T extends import("./types/base").ZodRawShape>(shape:T)=>ZodObject<T,{strict:true;},{[k in keyof({[k in{[k in keyof{[k in keyof import("./helpers/objectUtil").objectUtil.NoNever<T>]:import("./helpers/objectUtil").objectUtil.NoNever<T>[k]["_type"];}]:undefined extends{[k in keyof import("./helpers/objectUtil").objectUtil.NoNever<T>]:import("./helpers/objectUtil").objectUtil.NoNever<T>[k]["_type"];}[k]?k:never;}[{[k in keyof T]:T[k]extends never?never:k;}[keyof T]]]?:{[k in keyof import("./helpers/objectUtil").objectUtil.NoNever<T>]:import("./helpers/objectUtil").objectUtil.NoNever<T>[k]["_type"];}[k]|undefined;}&{[k in Exclude<{[k in keyof T]:T[k]extends never?never:k;}[keyof T],{[k in keyof{[k in keyof import("./helpers/objectUtil").objectUtil.NoNever<T>]:import("./helpers/objectUtil").objectUtil.NoNever<T>[k]["_type"];}]:undefined extends{[k in keyof import("./helpers/objectUtil").objectUtil.NoNever<T>]:import("./helpers/objectUtil").objectUtil.NoNever<T>[k]["_type"];}[k]?k:never;}[{[k in keyof T]:T[k]extends never?never:k;}[keyof T]]>]:{[k in keyof import("./helpers/objectUtil").objectUtil.NoNever<T>]:import("./helpers/objectUtil").objectUtil.NoNever<T>[k]["_type"];}[k];})]:({[k in{[k in keyof{[k in keyof import("./helpers/objectUtil").objectUtil.NoNever<T>]:import("./helpers/objectUtil").objectUtil.NoNever<T>[k]["_type"];}]:undefined extends{[k in keyof import("./helpers/objectUtil").objectUtil.NoNever<T>]:import("./helpers/objectUtil").objectUtil.NoNever<T>[k]["_type"];}[k]?k:never;}[{[k in keyof T]:T[k]extends never?never:k;}[keyof T]]]?:{[k in keyof import("./helpers/objectUtil").objectUtil.NoNever<T>]:import("./helpers/objectUtil").objectUtil.NoNever<T>[k]["_type"];}[k]|undefined;}&{[k in Exclude<{[k in keyof T]:T[k]extends never?never:k;}[keyof T],{[k in keyof{[k in keyof import("./helpers/objectUtil").objectUtil.NoNever<T>]:import("./helpers/objectUtil").objectUtil.NoNever<T>[k]["_type"];}]:undefined extends{[k in keyof import("./helpers/objectUtil").objectUtil.NoNever<T>]:import("./helpers/objectUtil").objectUtil.NoNever<T>[k]["_type"];}[k]?k:never;}[{[k in keyof T]:T[k]extends never?never:k;}[keyof T]]>]:{[k in keyof import("./helpers/objectUtil").objectUtil.NoNever<T>]:import("./helpers/objectUtil").objectUtil.NoNever<T>[k]["_type"];}[k];})[k];}>;declare const unionType:<T extends[ZodType<any,any>,ZodType<any,any>,...ZodType<any,any>[]]>(types:T)=>ZodUnion<T>;declare const intersectionType:<T extends ZodType<any,any>,U extends ZodType<any,any>>(left:T,right:U)=>ZodIntersection<T,U>;declare const tupleType:<T extends[]|[ZodType<any,any>,...ZodType<any,any>[]]>(schemas:T)=>ZodTuple<T>;declare const recordType:<Value extends ZodType<any,any>=ZodType<any,any>>(valueType:Value)=>ZodRecord<Value>;declare const functionType:<T extends ZodTuple<any>=ZodTuple<[]>,U extends ZodType<any,any>=ZodVoid>(args?:T|undefined,returns?:U|undefined)=>ZodFunction<T,U>;declare const lazyType:<T extends ZodType<any,any>>(getter:()=>T)=>ZodLazy<T>;declare const literalType:<T extends import("./helpers/primitive").Primitive>(value:T)=>ZodLiteral<T>;declare const enumType:<U extends string,T extends[U,...U[]]>(values:T)=>ZodEnum<T>;declare const promiseType:<T extends ZodType<any,any>>(schema:T)=>ZodPromise<T>;declare const ostring:()=>ZodUnion<[ZodString,ZodUndefined]>;declare const onumber:()=>ZodUnion<[ZodNumber,ZodUndefined]>;declare const oboolean:()=>ZodUnion<[ZodBoolean,ZodUndefined]>;declare const codegen:()=>ZodCodeGenerator;declare const instanceOfType:<T extends new(...args:any[])=>any>(cls:T,params?:string|Pick<{check:(arg:any)=>any;path?:(string|number)[]|undefined;}&Pick<import("./ZodError").CustomError,"message"|"params">,"message"|"path"|"params">|undefined)=>ZodType<InstanceType<T>,ZodTypeDef>;export{stringType as string,numberType as number,bigIntType as bigint,booleanType as boolean,dateType as date,undefinedType as undefined,nullType as null,anyType as any,unknownType as unknown,voidType as void,arrayType as array,objectType as object,unionType as union,intersectionType as intersection,tupleType as tuple,recordType as record,functionType as function,lazyType as lazy,literalType as literal,enumType as enum,promiseType as promise,instanceOfType as instanceof,ostring,onumber,oboolean,codegen,};export declare const late:{object:<T extends import("./types/base").ZodRawShape>(shape:()=>T)=>ZodObject<T,{strict:true;},{[k in keyof({[k in{[k in keyof{[k in keyof import("./helpers/objectUtil").objectUtil.NoNever<T>]:import("./helpers/objectUtil").objectUtil.NoNever<T>[k]["_type"];}]:undefined extends{[k in keyof import("./helpers/objectUtil").objectUtil.NoNever<T>]:import("./helpers/objectUtil").objectUtil.NoNever<T>[k]["_type"];}[k]?k:never;}[{[k in keyof T]:T[k]extends never?never:k;}[keyof T]]]?:{[k in keyof import("./helpers/objectUtil").objectUtil.NoNever<T>]:import("./helpers/objectUtil").objectUtil.NoNever<T>[k]["_type"];}[k]|undefined;}&{[k in Exclude<{[k in keyof T]:T[k]extends never?never:k;}[keyof T],{[k in keyof{[k in keyof import("./helpers/objectUtil").objectUtil.NoNever<T>]:import("./helpers/objectUtil").objectUtil.NoNever<T>[k]["_type"];}]:undefined extends{[k in keyof import("./helpers/objectUtil").objectUtil.NoNever<T>]:import("./helpers/objectUtil").objectUtil.NoNever<T>[k]["_type"];}[k]?k:never;}[{[k in keyof T]:T[k]extends never?never:k;}[keyof T]]>]:{[k in keyof import("./helpers/objectUtil").objectUtil.NoNever<T>]:import("./helpers/objectUtil").objectUtil.NoNever<T>[k]["_type"];}[k];})]:({[k in{[k in keyof{[k in keyof import("./helpers/objectUtil").objectUtil.NoNever<T>]:import("./helpers/objectUtil").objectUtil.NoNever<T>[k]["_type"];}]:undefined extends{[k in keyof import("./helpers/objectUtil").objectUtil.NoNever<T>]:import("./helpers/objectUtil").objectUtil.NoNever<T>[k]["_type"];}[k]?k:never;}[{[k in keyof T]:T[k]extends never?never:k;}[keyof T]]]?:{[k in keyof import("./helpers/objectUtil").objectUtil.NoNever<T>]:import("./helpers/objectUtil").objectUtil.NoNever<T>[k]["_type"];}[k]|undefined;}&{[k in Exclude<{[k in keyof T]:T[k]extends never?never:k;}[keyof T],{[k in keyof{[k in keyof import("./helpers/objectUtil").objectUtil.NoNever<T>]:import("./helpers/objectUtil").objectUtil.NoNever<T>[k]["_type"];}]:undefined extends{[k in keyof import("./helpers/objectUtil").objectUtil.NoNever<T>]:import("./helpers/objectUtil").objectUtil.NoNever<T>[k]["_type"];}[k]?k:never;}[{[k in keyof T]:T[k]extends never?never:k;}[keyof T]]>]:{[k in keyof import("./helpers/objectUtil").objectUtil.NoNever<T>]:import("./helpers/objectUtil").objectUtil.NoNever<T>[k]["_type"];}[k];})[k];}>;};export{ZodString,ZodNumber,ZodBigInt,ZodBoolean,ZodDate,ZodUndefined,ZodNull,ZodAny,ZodUnknown,ZodVoid,ZodArray,ZodObject,ZodUnion,ZodIntersection,ZodTuple,ZodRecord,ZodFunction,ZodLazy,ZodLiteral,ZodEnum,ZodPromise,ZodType,ZodType as Schema,ZodType as ZodSchema,ZodTypeAny,ZodDef,ZodError,ZodErrorMap,ZodErrorCode,ZodParsedType,ZodCodeGenerator,};export{TypeOf,TypeOf as infer};`
};