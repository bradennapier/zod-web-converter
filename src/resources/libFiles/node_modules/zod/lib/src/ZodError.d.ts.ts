export default {
    fileName: `/node_modules/zod/lib/src/ZodError.d.ts`,
    // File text is copyright Microsoft Corporation and is distributed under the Apache License, Version 2.0 (http://www.apache.org/licenses/LICENSE-2.0)
    text: `import{ZodParsedType}from'./parser';export declare const ZodErrorCode:{invalid_type:"invalid_type";nonempty_array_is_empty:"nonempty_array_is_empty";custom_error:"custom_error";invalid_union:"invalid_union";invalid_literal_value:"invalid_literal_value";invalid_enum_value:"invalid_enum_value";unrecognized_keys:"unrecognized_keys";invalid_arguments:"invalid_arguments";invalid_return_type:"invalid_return_type";invalid_date:"invalid_date";invalid_string:"invalid_string";too_small:"too_small";too_big:"too_big";};export declare type ZodErrorCode=keyof typeof ZodErrorCode;export declare type ZodSuberrorBase={path:(string|number)[];code:ZodErrorCode;message?:string;};interface InvalidTypeError extends ZodSuberrorBase{code:typeof ZodErrorCode.invalid_type;expected:ZodParsedType;received:ZodParsedType;}interface NonEmptyArrayIsEmptyError extends ZodSuberrorBase{code:typeof ZodErrorCode.nonempty_array_is_empty;}interface UnrecognizedKeysError extends ZodSuberrorBase{code:typeof ZodErrorCode.unrecognized_keys;keys:string[];}interface InvalidUnionError extends ZodSuberrorBase{code:typeof ZodErrorCode.invalid_union;unionErrors:ZodError[];}interface InvalidLiteralValueError extends ZodSuberrorBase{code:typeof ZodErrorCode.invalid_literal_value;expected:string|number|boolean;}interface InvalidEnumValueError extends ZodSuberrorBase{code:typeof ZodErrorCode.invalid_enum_value;options:string[];}interface InvalidArgumentsError extends ZodSuberrorBase{code:typeof ZodErrorCode.invalid_arguments;argumentsError:ZodError;}interface InvalidReturnTypeError extends ZodSuberrorBase{code:typeof ZodErrorCode.invalid_return_type;returnTypeError:ZodError;}interface InvalidDateError extends ZodSuberrorBase{code:typeof ZodErrorCode.invalid_date;}interface InvalidStringError extends ZodSuberrorBase{code:typeof ZodErrorCode.invalid_string;validation:'email'|'url'|'uuid';}interface TooSmallError extends ZodSuberrorBase{code:typeof ZodErrorCode.too_small;minimum:number;inclusive:boolean;type:'array'|'string'|'number';}interface TooBigError extends ZodSuberrorBase{code:typeof ZodErrorCode.too_big;maximum:number;inclusive:boolean;type:'array'|'string'|'number';}export interface CustomError extends ZodSuberrorBase{code:typeof ZodErrorCode.custom_error;params?:{[k:string]:any;};}export declare type ZodSuberrorOptionalMessage=InvalidTypeError|NonEmptyArrayIsEmptyError|UnrecognizedKeysError|InvalidUnionError|InvalidLiteralValueError|InvalidEnumValueError|InvalidArgumentsError|InvalidReturnTypeError|InvalidDateError|InvalidStringError|TooSmallError|TooBigError|CustomError;export declare type ZodSuberror=ZodSuberrorOptionalMessage&{message:string;};export declare const quotelessJson:(obj:any)=>string;export declare class ZodError extends Error{errors:ZodSuberror[];constructor(errors:ZodSuberror[]);static create:(errors:ZodSuberror[])=>ZodError;readonly message:string;readonly isEmpty:boolean;addError:(sub:ZodSuberror)=>void;addErrors:(subs?:ZodSuberror[])=>void;readonly formErrors:{formErrors:string[];fieldErrors:{[k:string]:string[];};};}export{};`
};